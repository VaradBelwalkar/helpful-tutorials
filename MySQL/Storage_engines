To see all the storage engines used by MySQL, you can run a SQL query against the information_schema database. Here's an example query:

####################################
SELECT ENGINE
FROM information_schema.ENGINES
WHERE SUPPORT = 'YES';
####################################


In MySQL, several storage engines are commonly used, each with its own advantages and specific use cases.
Here are some of the most famous and widely used storage engines:

################################################################################################################################################
InnoDB:
InnoDB is the default and most widely used storage engine in MySQL. It provides support for ACID transactions, 
foreign key constraints, and row-level locking. InnoDB is known for its reliability, crash recovery, and scalability. 
It is suitable for most general-purpose applications and is particularly recommended for applications that require transactional support.
################################################################################################################################################

################################################################################################################################################
MyISAM:
MyISAM was one of the earliest storage engines in MySQL. It offers simplicity and high performance for read-intensive workloads,
as well as full-text search capabilities. However, MyISAM does not support transactions or referential integrity constraints. 
It is often used for non-transactional applications such as data warehousing, logging, or caching.
################################################################################################################################################

######################################################################################################################################################
Memory (HEAP): 
The Memory storage engine stores data in memory, allowing for extremely fast read and write operations. However,
as the data resides solely in memory, it is not persistent and will be lost upon server restart. The Memory engine is suitable for temporary data, 
caching, or high-speed data processing.
######################################################################################################################################################

######################################################################################################################################################
CSV: 
The CSV storage engine stores data in comma-separated values (CSV) format, making it compatible with other applications that consume CSV files.
It is useful for importing or exporting data in a simple and portable format, but it lacks advanced features like indexing or transactions.
######################################################################################################################################################

################################################################################################################################################
Archive:
The Archive storage engine is optimized for high-speed insertions and efficient storage of large amounts of data.
It is well-suited for write-intensive applications or for archiving historical data where retrieval speed is less critical.
################################################################################################################################################

################################################################################################################################################
NDB (Cluster):
NDB is a distributed, high-availability storage engine designed for MySQL Cluster, which provides synchronous replication and
automatic data partitioning across multiple nodes. It offers high scalability and fault tolerance for demanding, high-availability applications.
################################################################################################################################################
