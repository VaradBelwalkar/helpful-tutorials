Consider the scenario:
I have access to two PCs in a network full of intruders
A service is running on machine 2, which I need to access anyway from my machine 1 which is physically away
I have root privilleges and even the sshd is running on that machine 2 and only i can access it with my private key where password auth is turned off
So here, my problem is the communication is definetly going to be plaintext as setting up certificates and all is cumbersome and not feasible in 
own-managed client code, i.e very time consuming to code and make it work

Here we can utilize SSH to have an encrypted communication between machine 1 and machine 2 over SSH Tunnel

Suppose command:
      
          ssh -L 8080:localhost:80 user@remotehost

Here, a service is running on port 80 on remote host, and i want to access, so i just made a "Local Forwarding" of SSH from my side
Here, it means that any request made to machine 1's port 8080, will be first tunneled to machine 2 which is remotehost
THEN,

There ssh will create a TCP connection to localhost:80 which we have provided in the command 
It means that not just localhost, but you can give any valid ip address from remote host's network, or even Public IP address as well

So typically it means that it instantiates a connection as a request over there thereby a random port allocated to that process first, then when 
response is received, it is again tunneled back to the client's machine i.e machine 1 from where OS takes care to whom to pass the response


Same happens with the REVERSE SSH TUNNEL,
Suppose command,

          ssh -R 8080:localhost:80 user@remotehost
          
Here instead of machine 1's 8080, machine 2's 8080 port is tunneled meaning any traffic coming to 8080 port of machine 2 is tunneled to machine 1,
and the same, i.e TCP connection creation and forwarding of response back to the tunnel happens


This is particularly helpful if you are behind NAT, and want to expose your services to public,
for that, the remote host's IP address should be publicly reachable






                                                HOW TO ESTABLISH REVERSE SSH TUNNEL BETWEEEN TWO PCS BEHIND NAT USING RELAY SERVER
                                               

Here, first get relay server's hostname if it is DNS addressible, else get it's IP, then get your username, and password

ON MACHINE WHICH YOU WANT TO ACCESS REMOTELY
RUN
          ssh -N -R 49101:localhost:21001 relayuser@relayhost
          
         Here, -N makes sure that only ports are being forwarded and you are not logged in, because most of these relay services don't offer login 
         49101 is port on relay server (try to change if that is not available)
         21001 is port on remote machine where service will run, (you can set it to 22, to access ssh through ssh tunneling :)  )
         
         meaning that any traffic on port 49101 on relay server will be forwaded to port 21001 on remote machine
         
         

ON MACHINE WHICH IS CLIENT
RUN

          ssh -N -L 8080:localhost:49101 relayuser@relayhost
          
          Here, -N again suggests the same, make only port forwarding
          Here, any request made to port 8080 on client machine will be tunneled to relay server, where a TCP connection to port 49101 will be made
          
          Where that traffic will be passed to remote machine as of Reverse SSH Tunnel then response is again received and that TCP connection
          forwards the response again through this forward tunnel to client machine, where the process who requested gets the response
          
          
          
          
 That is the workflow of Relaying SSH
 
 
 You can use this to log into remote machine using SSH through SSH Tunneling,
 
 just change remote machine command to:
      
              ssh -N -R 49101:localhost:22 relayuser@relayhost
              
              
which ensures that the traffic will be forwarded to port 22, where SSHD is listening


No need to change anything on client side,


just make ssh connection like this :
  
        ssh -p 8080 username_on_remote_machine@localhost
        


    












