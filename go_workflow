In Go, it is not possible to isolate the dependencies for different projects in the same way you can with Python virtual environments.

In Go, all of the dependencies for all of your projects will be stored in the src directory within GOPATH, and they will be organized by their import paths.

This means that if you are working on multiple Go projects that have overlapping dependencies, 
it is possible that you may end up with multiple versions of the same dependency installed in the src directory. However, 
Go modules, introduced in Go 1.11, provide a way to manage dependencies in a more flexible and reliable way,
and they can help void conflicts between different versions of the same dependency.

Go modules allow you to specify the dependencies for each project in a go.mod file, which is stored in the root directory of the project.

The go.mod file specifies the import paths of the packages that are part of the module, as well as the versions of those packages and any additional dependencies that the module requires. 
By using Go modules, you can isolate the dependencies for each project and avoid conflicts between different projects.

While Go does not have a local node_modules equivalent or a system like Python virtual environments,
it does provide tools and features that can help you manage dependencies for your projects.


So What I understood is Here -------->
( I will be comparing the go workflow with node.js at last here so if you know that it will be a plus point)

First, let's understand some key terminologies in the Go environment --->
GOROOT ----> The directory where the Go installation is located, So it is an Environment variable
When you download an archived file from the official repo of Go, as the package manager is not involved, this env is not set
You need to set it to the folder containing the extracted go installation with directories like bin/ src/ pkg/ etc.
Then, you need to add the folder $GOROOT/bin/ to the PATH env as well to call go from anywhere as it is located there
So when you call to go to execute any go code, the PATH env will call the appropriate Go executable from $GOROOT/bin/ which is $GOROOT/bin/go
Go compiler optionally requires This $GOROOT env variable to know where to look for system-level packages like "fmt", "net" etc.
Optionally because anyway it will search relatively to its path to look for the system packages as it knows it will be itself inside the 
installation directory right :)
Then, As you have installed without a package manager and nothing is set, you compulsorily need to set the env variable "GOPATH" as your workspace
This is mostly user-specific and should be set to something like /home/foo_user/go/
When you download with package manager or on Windows this env variable "GOPATH" is automatically created and the directory goes inside your home folder 
i.e /home/foo_user/go is automatically created ad it is set to that 
Go optionally requires GOBIN env which is nothing but $GOPATH/bin
that means when we created /home/foo_user/go and set it as the value of GOPATH, inside that there will be a folder bin/ which is created automatically in case
of the above-mentioned scenarios (you do not require it directly as will not be working inside this GOPATH directory anyway :) )

So what next?
Well here Go gets interesting!

When you want to create a project in any stack, what do you do?
Well you create an empty directory in your home-directory like "/home/foo_user/some_project"

We are going to do exactly that!

suppose I created a folder like /home/foo_user/go_project  where /home/foo_user/go already exists(required)

and You start working there.
suppose I create a simple file called file. go in /home/foo_user/go_project and use standard libraries which are already available in the go installation,
then you can run that file directly as go run ./file.go  (assuming you are in the same directory)
Then it is fine and ok 

But when you require a package that is hosted on github.com/some_user/some_package/
Then You might think you just need the command " go get ...." to download it right? 
well, here is the actual process.

Go from version XXXX, has stopped downloading dependencies without listing them in the project's go.mod file 
This is important as it forces you to have the go.mod file in which whatever you download with "go get...." will be listed


So you need to initialize that project directory with the command "go mod init github.com/foo_user/some_name" 
the string after init is your module name
don't worry about that right now.
It then creates an empty go.mod file in that project directory (remember, empty)
Then when you want the required package suppose "github.com/some_user/some_package"
what you write is "go get github.com/some_user/some_package"
BUT REMEMBER you write this while being in the project's directory where go.mod is there

By this, go will first look for the go.mod file in the current directory (the directory from which you ran the command) then if it finds the go.mod file,
it is going to first locate that file by converting it into the URL i.e https://github.com/some_user/some_package and sees if some package named
that exists over there or not, then it downloads the package


WAIT where does it download?

Here GOPATH comes into play.

go get command downloads the package from the URL into the $GOPATH/src/ directory by recreating the URL structure 
i.e. what the above "go get..." command will do is it will recreate the path that is,

$GOPATH/src/github.com/some_user/some_package/ and then whatever that "some_package" contains, it will download over there.

After successful download, it is going to update the go.mod file which is /home/foo_user/go_project/go.mod and add the "github.com/some_user/some_package"
into the required section 

That is all!

So this points out something;

Suppose you are working on 10 different go projects, then when you run "go get...." into those projects,
all the dependencies will get installed into the same directory which is

$GOPATH/src/


So, technically, you cannot separate dependencies in the Go language for different projects


So in the context of node.js,
it is something like if you have only one node_modules folder in your home folder, like /home/foo_user/node_modules, and when you run "npm install" in any of the projects which contain package.json or package-lock.json, instead of creating a separate folder in that 
project directory it is just going to install it over the single node_modules folder.


And in the context of python,
It is something like if you can't work with virtualenv, means all your dependencies will be installed in /usr/lib/pythonxxx/site-packages/ 
(where xxx is python's version)



(Remember above two ones are just analogies that provide you understanding in the context of node.js and python by assuming that if
something like that was there)



So when you download some package from suppose github.com/user_name/repository_name/
the Go will recreate the structure in $GOPATH/src/ like,
$GOPATH/src/github.com/user_name/repository_name/*
where * denotes all the contents that are stored in the repository.



So that was all about How does Go manage dependencies.

What about go install? what does it do?
  
it just installs the necessary files into the right location.
Well, what does that mean?

Again suppose you are in your project directory, i.e /home/foo_user/go_project/

and you have a go executable file (a file with "package main" directive at the top and main function) suppose go_executable.go

and you have proper dependencies listed in that file,
then,

      go install path_to_file/go_executable.go
     
will first build the file and its dependencies (if the compiled source is found for dependencies, it will use them else it will compile them as well)

then it will copy the executable file (standard executable) into the project's bin folder


Always remember ------>


If you try to import a package that is present in your GOPATH but is not listed in the go.mod file of the current module, 
the Go compiler will not be able to find the package and will raise an error.

The go.mod file defines the dependencies of a Go module, and the Go compiler uses it to resolve the import paths of those dependencies. 
When you import a package, the Go compiler first looks for the package in the current directory (also known as the "local import path").
If it doesn't find the package in the current directory, it will then search the directories in the GOPATH for the package.

However, the Go compiler will only search the GOPATH for a package if the package is listed as a dependency in the go.mod file.
If the package is not listed in the go.mod file, the Go compiler will not search the GOPATH for the package and will instead raise an error.

In simple terms,

consider the following scenario --------->

You created project1 and has a dependency on github.com/foo/something
So you must need the go.mod file in project1 in order to use "go get github.com/foo/something" (means create it or run "go mod init <your package name>)
Then run that command so that it will write that dependency in that go.mod file then download the dependency in
$GOPATH/src/ folder by recreating the structure
Here the dependency will work fine in project1


Now suppose you created a project2 folder and it requires the same dependency, and there as well you don't have any go.mod file which determines modules 
dependencies
Now you will think that if the package github.com/foo/something is already downloaded then why do we need to go.mod again in project2, as we are also 
NOT running the "go get .."
So you might think that just adding the line "import github.com/foo/something" in any go file in that folder will work fine
But it is WRONG!

Go will only look for the system libraries directly, and it doesn't find the "github.com/foo/something" package over there(absolutely!)
Then it will immediately look at whether you have written it as a dependency for your project in the go.mod file or not!
That means over there, you require a go.mod file in that project2 directory as well if they go compiler,
   doesn't find go.mod file or doesn't find an entry for that dependency in that file,
   then it is not even going to look into the $GOPATH to see whether is it there or not.
   
So even if you have installed the package in your $GOPATH/src/  When you need it in another project directory, you must specify that package as 
dependency in the go.mod file then and then only the go compiler will start looking for that package in the $GOPATH/src/ directory


So the go module search is ---->

                                                  then                         then 
Current directory of the file given to go compiler ----------> system libraries -----------> 


------->Check if dependency is listed in the go.mod file (it will check in current as well as parent directories for the go.mod file)
          |                                                             |
          | YES                                                         | NO
          |                                                             |
          |                                                             |
        then                                                           then

Search in the $GOPATH/src/                                  Raise error as no go.mod file found
directory for the package

