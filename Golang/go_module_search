Go looks for modules in the following way:

When you import a package in your Go code, Go will first check if the package is part of the standard library. If it is, Go will use the standard library version of the package.

If the package is not part of the standard library, Go will look for a module that includes the package. This is done by checking the go.mod file in the current module and looking for a module dependency that includes the desired package. If it is found, Go will use the version of the package specified in the go.mod file.

If Go cannot find the package in the current module's dependencies, it will look for a module in the go.sum file that includes the package. 

The go.sum file is a checksum database that lists the versions of modules that have been downloaded and verified. If the package is found in the go.sum file, Go will use the version of the package specified in the go.sum file.

If Go still cannot find the package, it will try to download the package from the internet using the URL specified in the import path. Go will then add the package to the go.mod file as a new dependency and update the go.sum file to reflect the new dependency.

Go looks for modules by checking the current module's dependencies, the go.sum file, and the internet, in that order. If the package is found, Go will use the version of the package specified in the corresponding source. If the package is not found, Go will attempt to download it from the internet and add it as a new dependency.
